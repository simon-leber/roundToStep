{"mappings":"AAMA;;;;;GAKG,CACF,SAAS,yCAAW,CAAC,KAAa,EAAE,OAAwB,EAAU;IACnE,MAAM,QAAQ,GAA8B;QAAE,SAAS,EAAE,IAAI;QAAE,QAAQ,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;KAAE;IACvF,MAAM,aAAE,SAAS,CAAA,YAAE,QAAQ,CAAA,UAAE,MAAM,CAAA,EAAE,GAAG;QAAE,GAAG,QAAQ;QAAE,GAAG,OAAO;KAAE;IAEnE,MAAM,eAAe,GAAG,AAAC,CAAA,KAAK,GAAG,MAAM,CAAA,GAAI,QAAQ;IAEnD,MAAM,iBAAiB,GAAG,AAAC,CAAA,IAAM;QAC7B,IAAI,SAAS,KAAK,YAAY,EAC1B,OAAO,SAAS,CAAA;QAEpB,OAAO,eAAe,GAAG,QAAQ,GAC3B,MAAM,GACN,IAAI,CAAA;KACb,CAAA,EAAG;IAEJ,IAAI,iBAAiB,KAAK,MAAM,EAC5B,OAAO,KAAK,GAAG,eAAe,CAAA;IAGlC,MAAM,WAAW,GAAG,AAAC,CAAA,QAAQ,GAAG,eAAe,CAAA,GAAI,QAAQ;IAC3D,OAAO,KAAK,GAAG,WAAW,CAAA;CAC7B","sources":["src/index.ts"],"sourcesContent":["interface RoundingOptions {\n    direction?: 'up' | 'down' | 'commercial',\n    interval?: number,\n    offset?: number,\n}\n\n/**\n * Round numbers to a step. Accepts an interval and optional offset.\n * @param value Value to round\n * @param options Rounding options\n * @returns Rounded value\n */\n function roundToStep(value: number, options: RoundingOptions): number {\n    const defaults: Required<RoundingOptions> = { direction: 'up', interval: 1, offset: 0 }\n    const { direction, interval, offset } = { ...defaults, ...options }\n\n    const deltaToPrevious = (value - offset) % interval\n\n    const directionUpOrDown = (() => {\n        if (direction !== 'commercial') {\n            return direction\n        }\n        return deltaToPrevious < interval\n            ? 'down'\n            : 'up'\n    })()\n\n    if (directionUpOrDown === 'down') {\n        return value - deltaToPrevious\n    }\n\n    const deltaToNext = (interval - deltaToPrevious) % interval\n    return value + deltaToNext\n}\n\nexport { roundToStep }"],"names":[],"version":3,"file":"index.js.map"}